/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.98
 * Generated at: 2025-03-10 07:01:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.academictrip.model.User;

public final class unauthorized_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/includes/footer.jsp", Long.valueOf(1741566959380L));
    _jspx_dependants.put("/includes/header.jsp", Long.valueOf(1741544026367L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("com.academictrip.model.User");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <title>Unauthorized Access - Academic Trip System</title>\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/styles.css\">\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\">\n");
      out.write("    <style>\n");
      out.write("        .error-container {\n");
      out.write("            text-align: center;\n");
      out.write("            max-width: 600px;\n");
      out.write("            margin: 5rem auto;\n");
      out.write("        }\n");
      out.write("        .error-icon {\n");
      out.write("            font-size: 5rem;\n");
      out.write("            color: var(--danger);\n");
      out.write("            margin-bottom: 2rem;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    ");
      out.write('\n');
      out.write('\n');

    User currentUser = (User) session.getAttribute("user");
    String userRole = currentUser != null ? currentUser.getRole() : "";

      out.write("\n");
      out.write("<header class=\"header\">\n");
      out.write("    <div class=\"container\">\n");
      out.write("        <nav class=\"nav\">\n");
      out.write("            <a href=\"");
      out.print( request.getContextPath() );
      out.write("/\" class=\"nav-logo\">Academic Trip System</a>\n");
      out.write("            <ul class=\"nav-links\">\n");
      out.write("                ");
 if (currentUser != null) { 
      out.write("\n");
      out.write("                    ");
 if ("lecturer".equalsIgnoreCase(userRole)) { 
      out.write("\n");
      out.write("                        <li><a href=\"");
      out.print( request.getContextPath() );
      out.write("/lecturer/addTrip.jsp\">Add Trip</a></li>\n");
      out.write("                        <li><a href=\"");
      out.print( request.getContextPath() );
      out.write("/lecturer/viewTimetable.jsp\">View Timetable</a></li>\n");
      out.write("                    ");
 } else if ("transport_manager".equalsIgnoreCase(userRole) || "transport".equalsIgnoreCase(userRole)) { 
      out.write("\n");
      out.write("                        <li><a href=\"");
      out.print( request.getContextPath() );
      out.write("/transport/manageDrivers.jsp\">Manage Drivers</a></li>\n");
      out.write("                        <li><a href=\"");
      out.print( request.getContextPath() );
      out.write("/transport/manageVehicles.jsp\">Manage Vehicles</a></li>\n");
      out.write("                        <li><a href=\"");
      out.print( request.getContextPath() );
      out.write("/transport/assignResources.jsp\">Assign Resources</a></li>\n");
      out.write("                        <li><a href=\"");
      out.print( request.getContextPath() );
      out.write("/transport/assignDriverVehicle.jsp\">Driver-Vehicle Assignments</a></li>\n");
      out.write("                        <li><a href=\"");
      out.print( request.getContextPath() );
      out.write("/transport/viewAssignments.jsp\">View Assignments</a></li>\n");
      out.write("                    ");
 } 
      out.write("\n");
      out.write("                    <li><a href=\"");
      out.print( request.getContextPath() );
      out.write("/logout.jsp\">Logout</a></li>\n");
      out.write("                ");
 } else { 
      out.write("\n");
      out.write("                    <li><a href=\"");
      out.print( request.getContextPath() );
      out.write("/login.jsp\">Login</a></li>\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("            </ul>\n");
      out.write("        </nav>\n");
      out.write("    </div>\n");
      out.write("</header>\n");
      out.write("\n");
      out.write("    \n");
      out.write("    <div class=\"container\">\n");
      out.write("        <div class=\"error-container\">\n");
      out.write("            <div class=\"error-icon\">\n");
      out.write("                <i class=\"fas fa-exclamation-triangle\"></i>\n");
      out.write("            </div>\n");
      out.write("            <h1 class=\"mb-3\">Unauthorized Access</h1>\n");
      out.write("            <p class=\"mb-4\">You don't have permission to access this resource. Please contact your administrator if you believe this is an error.</p>\n");
      out.write("            <a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/\" class=\"btn btn-primary\">\n");
      out.write("                <i class=\"fas fa-home mr-2\"></i> Return to Home\n");
      out.write("            </a>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    \n");
      out.write("    ");
      out.write("<footer class=\"footer bg-gray-800 text-white mt-auto py-6\">\n");
      out.write("    <div class=\"container mx-auto px-4\">\n");
      out.write("        <div class=\"flex flex-wrap justify-between items-center\">\n");
      out.write("            <div class=\"mb-4 md:mb-0\">\n");
      out.write("                <h3 class=\"text-lg font-semibold mb-2\">Academic Trip System</h3>\n");
      out.write("                <p class=\"text-sm text-gray-400\">Streamlining educational excursions management</p>\n");
      out.write("            </div>\n");
      out.write("            <div class=\"text-sm text-gray-400\">\n");
      out.write("                &copy; ");
      out.print( java.time.Year.now().getValue() );
      out.write(" Academic Trip Management. All rights reserved.\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("</footer>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("// Common JavaScript functions\n");
      out.write("function showToast(message, type = 'info') {\n");
      out.write("    const toast = document.createElement('div');\n");
      out.write("    toast.className = `alert alert-");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${type}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" fixed-bottom m-3`;\n");
      out.write("    toast.style.position = 'fixed';\n");
      out.write("    toast.style.bottom = '20px';\n");
      out.write("    toast.style.right = '20px';\n");
      out.write("    toast.style.zIndex = '1000';\n");
      out.write("    toast.innerHTML = `\n");
      out.write("        ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${message}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\n");
      out.write("        <button type=\"button\" class=\"close\" onclick=\"this.parentElement.remove();\" \n");
      out.write("                style=\"float: right; background: none; border: none; font-size: 1.5rem;\">&times;</button>\n");
      out.write("    `;\n");
      out.write("    document.body.appendChild(toast);\n");
      out.write("    \n");
      out.write("    // Auto remove after 5 seconds\n");
      out.write("    setTimeout(() => {\n");
      out.write("        if (toast.parentElement) {\n");
      out.write("            toast.remove();\n");
      out.write("        }\n");
      out.write("    }, 5000);\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Form validation\n");
      out.write("function validateForm(formId) {\n");
      out.write("    const form = document.getElementById(formId);\n");
      out.write("    if (!form) return true;\n");
      out.write("    \n");
      out.write("    const inputs = form.querySelectorAll('[required]');\n");
      out.write("    let valid = true;\n");
      out.write("    \n");
      out.write("    inputs.forEach(input => {\n");
      out.write("        if (!input.value.trim()) {\n");
      out.write("            valid = false;\n");
      out.write("            const errorElement = document.createElement('div');\n");
      out.write("            errorElement.className = 'form-error';\n");
      out.write("            errorElement.innerText = 'This field is required';\n");
      out.write("            \n");
      out.write("            // Remove existing error messages\n");
      out.write("            const existingError = input.parentElement.querySelector('.form-error');\n");
      out.write("            if (existingError) existingError.remove();\n");
      out.write("            \n");
      out.write("            input.parentElement.appendChild(errorElement);\n");
      out.write("            input.classList.add('is-invalid');\n");
      out.write("            \n");
      out.write("            input.addEventListener('input', function() {\n");
      out.write("                if (this.value.trim()) {\n");
      out.write("                    const error = this.parentElement.querySelector('.form-error');\n");
      out.write("                    if (error) error.remove();\n");
      out.write("                    this.classList.remove('is-invalid');\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("    });\n");
      out.write("    \n");
      out.write("    return valid;\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Initialize tooltip and popover if Bootstrap is used\n");
      out.write("document.addEventListener('DOMContentLoaded', function() {\n");
      out.write("    // Check if Bootstrap is available\n");
      out.write("    if (typeof bootstrap !== 'undefined') {\n");
      out.write("        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n");
      out.write("        tooltipTriggerList.map(function (tooltipTriggerEl) {\n");
      out.write("            return new bootstrap.Tooltip(tooltipTriggerEl);\n");
      out.write("        });\n");
      out.write("        \n");
      out.write("        const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'));\n");
      out.write("        popoverTriggerList.map(function (popoverTriggerEl) {\n");
      out.write("            return new bootstrap.Popover(popoverTriggerEl);\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("});\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
