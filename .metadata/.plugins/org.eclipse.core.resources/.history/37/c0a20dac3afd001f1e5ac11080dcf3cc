package com.academictrip.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.academictrip.model.DriverVehicle;
import com.academictrip.util.DatabaseUtil;

public class DriverVehicleDAO {
	private String generateDriverVehicleId() throws SQLException {
        String prefix = "DV";
        String sql = "SELECT MAX(driver_vehicle_id) AS max_id FROM Driver_Vehicle";
        try (Connection connection = DatabaseUtil.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {
            if (resultSet.next()) {
                String maxId = resultSet.getString("max_id");
                if (maxId == null) {
					return prefix + "001";
				}
                int numericPart = Integer.parseInt(maxId.replace(prefix, ""));
                return String.format("%s%03d", prefix, numericPart + 1);
            }
            return prefix + "001";
        }
    }

    // Insert a new assignment
	public String insertAssignment(DriverVehicle assignment) throws SQLException {
        String driverVehicleId = generateDriverVehicleId();
        String sql = "INSERT INTO Driver_Vehicle (driver_vehicle_id, driver_id, vehicle_id, assignment_start, assigment_end) " +
                "VALUES (?, ?, ?, ?, ?)";

        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, driverVehicleId);
            stmt.setString(2, assignment.getDriverId());
            stmt.setString(3, assignment.getVehicleId());
            stmt.setDate(4, Date.valueOf(LocalDate.now())); // assignment_start
            stmt.setDate(5, Date.valueOf(LocalDate.now().plusDays(1))); // assignment_end (example)
            stmt.executeUpdate();

            return driverVehicleId;
        }
    }

    // Get all assignments
    public List<DriverVehicle> getAllAssignments() throws SQLException {
        List<DriverVehicle> assignments = new ArrayList<>();
        String sql = "SELECT * FROM Driver_Vehicle";
        try (Connection connection = DatabaseUtil.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                DriverVehicle assignment = new DriverVehicle();
                assignment.setDriverVehicleId(resultSet.getString("driver_vehicle_id"));
                assignment.setDriverId(resultSet.getString("driver_id"));
                assignment.setVehicleId(resultSet.getString("vehicle_id"));
                
                // Properly handle DATE type fields
                Date startDate = resultSet.getDate("assignment_start");
                if (startDate != null) {
                    assignment.setAssignmentStart(startDate.toLocalDate());
                }

                // Note the column name spelling "assigment_end" (missing 'n')
                Date endDate = resultSet.getDate("assigment_end");
                if (endDate != null) {
                    assignment.setAssignmentEnd(endDate.toLocalDate());
                }

                assignments.add(assignment);
            }
        }
        return assignments;
    }

    /**
     * Creates a new driver-vehicle assignment and returns the generated ID
     */
    public String createAssignment(String driverId, String vehicleId) throws SQLException {
        // Generate a new driver_vehicle_id
        String driverVehicleId = generateDriverVehicleId();
        
        // Make sure to include assignment_start and assigment_end fields as they're NOT NULL
        String sql = "INSERT INTO Driver_Vehicle (driver_vehicle_id, driver_id, vehicle_id, assignment_start, assigment_end) VALUES (?, ?, ?, ?, ?)";
        
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            
            stmt.setString(1, driverVehicleId);
            stmt.setString(2, driverId);
            stmt.setString(3, vehicleId);
            // Set default dates for the assignment (current date to one month later)
            LocalDate today = LocalDate.now();
            stmt.setDate(4, Date.valueOf(today));  // assignment_start
            stmt.setDate(5, Date.valueOf(today.plusMonths(1)));  // assigment_end
            
            stmt.executeUpdate();
        }
        
        return driverVehicleId;
    }

    /**
     * Get assignment by its ID
     * @param id the driver_vehicle_id
     * @return DriverVehicle object or null if not found
     */
    public DriverVehicle getAssignmentByTripDriverVehicleId(String id) throws SQLException {
        String sql = "SELECT * FROM Driver_Vehicle WHERE driver_vehicle_id = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    DriverVehicle dv = new DriverVehicle();
                    dv.setDriverVehicleId(rs.getString("driver_vehicle_id"));
                    dv.setDriverId(rs.getString("driver_id"));
                    dv.setVehicleId(rs.getString("vehicle_id"));
                    dv.setAssignmentStart(rs.getDate("assignment_start").toLocalDate());
                    dv.setAssignmentEnd(rs.getDate("assignment_end").toLocalDate());
                    return dv;
                }
            }
        }
        return null;
    }
    
    /**
     * Get assignment for a specific trip
     * @param tripId the trip ID
     * @return DriverVehicle object or null if not found
     */
    public DriverVehicle getAssignmentByTripId(int tripId) throws SQLException {
        String sql = "SELECT dv.* FROM Driver_Vehicle dv " +
                     "JOIN Trip t ON t.driver_vehicle_id = dv.driver_vehicle_id " +
                     "WHERE t.trip_id = ?";
        
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            
            stmt.setInt(1, tripId);
            
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    DriverVehicle dv = new DriverVehicle();
                    dv.setDriverVehicleId(rs.getString("driver_vehicle_id"));
                    dv.setDriverId(rs.getString("driver_id"));
                    dv.setVehicleId(rs.getString("vehicle_id"));
                    dv.setAssignmentStart(rs.getDate("assignment_start").toLocalDate());
                    dv.setAssignmentEnd(rs.getDate("assignment_end").toLocalDate());
                    return dv;
                }
            }
        }
        return null;
    }
}