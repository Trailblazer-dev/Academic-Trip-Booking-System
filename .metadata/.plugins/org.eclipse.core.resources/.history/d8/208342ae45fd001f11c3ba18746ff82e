package com.academictrip.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;

import com.academictrip.model.Vehicle;
import com.academictrip.util.DatabaseUtil;

public class VehicleDAO {

    // Generate vehicle_id (e.g., VEH001)
    private String generateVehicleId() throws SQLException {
        String prefix = "VEH";
        String sql = "SELECT MAX(vehicle_id) FROM Vehicle";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            if (rs.next()) {
                String maxId = rs.getString(1);
                if (maxId == null) {
					return prefix + "001";
				}
                int numericPart = Integer.parseInt(maxId.replace(prefix, ""));
                return String.format("%s%03d", prefix, numericPart + 1);
            }
            return prefix + "001";
        }
    }

    public void insertVehicle(Vehicle vehicle) throws SQLException {
        String vehicleId = generateVehicleId();
        vehicle.setVehicleId(vehicleId);

        String sql = "INSERT INTO Vehicle (vehicle_id, make, model, year, capacity, plate_number) "
                   + "VALUES (?, ?, ?, ?, ?, ?)";

        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, vehicle.getVehicleId());
            stmt.setString(2, vehicle.getMake());
            stmt.setString(3, vehicle.getModel());
            stmt.setDate(4, Date.valueOf(vehicle.getYear()));
            stmt.setInt(5, vehicle.getCapacity());
            stmt.setString(6, vehicle.getPlateNumber());

            stmt.executeUpdate();
        }
    }

    public Vehicle getDefaultVehicle() throws SQLException {
        String sql = "SELECT * FROM Vehicle WHERE vehicle_id = 'DEFAULT'";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            if (rs.next()) {
                return new Vehicle(
                    rs.getString("vehicle_id"),
                    rs.getString("make"),
                    rs.getString("model"),
                    rs.getDate("year").toLocalDate(),
                    rs.getInt("capacity"),
                    rs.getString("plate_number")
                );
            }
            return null;
        }
    }
    public List<Vehicle> getAllVehicles() throws SQLException {
        List<Vehicle> vehicles = new ArrayList<>();
        String sql = "SELECT * FROM Vehicle";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                vehicles.add(new Vehicle(
                    rs.getString("vehicle_id"),
                    rs.getString("make"),
                    rs.getString("model"),
                    rs.getDate("year").toLocalDate(),
                    rs.getInt("capacity"),
                    rs.getString("plate_number")
                ));
            }
        }
        return vehicles;
    }

    /**
     * Get vehicle by ID
     * @param id the vehicle ID
     * @return Vehicle object or null if not found
     */
    public Vehicle getVehicleById(String id) throws SQLException {
        String sql = "SELECT * FROM Vehicle WHERE vehicle_id = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    Vehicle vehicle = new Vehicle();
                    vehicle.setVehicleId(rs.getString("vehicle_id"));
                    vehicle.setMake(rs.getString("make"));
                    vehicle.setModel(rs.getString("model"));
                    vehicle.setYear(rs.getDate("year").toLocalDate());
                    vehicle.setCapacity(rs.getInt("capacity"));
                    vehicle.setPlateNumber(rs.getString("plate_number"));
                    return vehicle;
                }
            }
        }
        return null;
    }

    /**
     * Gets multiple vehicles by their IDs
     * 
     * @param vehicleIds Set of vehicle IDs to fetch
     * @return Map of vehicle ID to Vehicle object
     * @throws SQLException if database error occurs
     */
    public Map<String, Vehicle> getVehiclesByIds(Set<String> vehicleIds) throws SQLException {
        Map<String, Vehicle> vehiclesMap = new HashMap<>();
        
        if (vehicleIds.isEmpty()) {
            return vehiclesMap;
        }
        
        // Create SQL with placeholders for each ID
        StringBuilder sql = new StringBuilder("SELECT * FROM vehicle WHERE vehicle_id IN (");
        for (int i = 0; i < vehicleIds.size(); i++) {
            sql.append(i > 0 ? ", ?" : "?");
        }
        sql.append(")");
        
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql.toString())) {
            
            // Set all the IDs as parameters
            int i = 1;
            for (String id : vehicleIds) {
                stmt.setString(i++, id);
            }
            
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Vehicle vehicle = extractVehicleFromResultSet(rs);
                    vehiclesMap.put(vehicle.getVehicleId(), vehicle);
                }
            }
        }
        
        return vehiclesMap;
    }
}