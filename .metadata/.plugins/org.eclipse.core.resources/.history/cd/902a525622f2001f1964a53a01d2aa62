package com.academictrip.dao;

import com.academictrip.model.DriverVehicle;
import com.academictrip.util.DatabaseUtil;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class DriverVehicleDAO {
    // Insert a new assignment
    public void insertAssignment(DriverVehicle assignment) throws SQLException {
        String sql = "INSERT INTO Driver_Vehicle (driver_vehicle_id, driver_id, vehicle_id, assignment_start) VALUES (?, ?, ?, CURDATE())";
        try (Connection connection = DatabaseUtil.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {
            // Generate driver_vehicle_id (e.g., DV001)
            String newId = generateNewId(connection);
            statement.setString(1, newId);
            statement.setString(2, assignment.getDriverId());
            statement.setString(3, assignment.getVehicleId());
            statement.executeUpdate();
        }
    }

    // Get all assignments
    public List<DriverVehicle> getAllAssignments() throws SQLException {
        List<DriverVehicle> assignments = new ArrayList<>();
        String sql = "SELECT * FROM Driver_Vehicle";
        try (Connection connection = DatabaseUtil.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                DriverVehicle assignment = new DriverVehicle();
                assignment.setDriverVehicleId(resultSet.getString("driver_vehicle_id"));
                assignment.setDriverId(resultSet.getString("driver_id"));
                assignment.setVehicleId(resultSet.getString("vehicle_id"));
                assignment.setAssignmentStart(resultSet.getString("assignment_start"));
                assignment.setAssignmentEnd(resultSet.getString("assignment_end"));
                assignments.add(assignment);
            }
        }
        return assignments;
    }

    // Generate a new driver_vehicle_id (e.g., DV001)
    private String generateNewId(Connection connection) throws SQLException {
        String sql = "SELECT MAX(CAST(SUBSTRING(driver_vehicle_id, 3) AS UNSIGNED)) AS max_id FROM Driver_Vehicle";
        try (PreparedStatement statement = connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {
            if (resultSet.next()) {
                int maxId = resultSet.getInt("max_id");
                return String.format("DV%03d", maxId + 1);
            } else {
                return "DV001";
            }
        }
    }
}